// Generate a secure random number
function getSecureRandom() {
    const array = new Uint32Array(1);
    window.crypto.getRandomValues(array);
    return array[0] / (0xFFFFFFFF + 1); // Normalize to [0,1)
}

const rand = getSecureRandom();
----------66666

(function() {
    const originalAssign = window.location.assign;
    const originalReplace = window.location.replace;

    function isSameOrigin(url) {
        try {
            const newURL = new URL(url, window.location.origin);
            return newURL.origin === window.location.origin;
        } catch (e) {
            return false;
        }
    }

    window.location.assign = function(url) {
        if (isSameOrigin(url)) {
            originalAssign.call(window.location, url);
        } else {
            console.warn('Cross-origin redirects are blocked:', url);
        }
    };

    window.location.replace = function(url) {
        if (isSameOrigin(url)) {
            originalReplace.call(window.location, url);
        } else {
            console.warn('Cross-origin redirects are blocked:', url);
        }
    };

    // Intercept direct href assignments
    Object.defineProperty(window.location, 'href', {
        set: function(url) {
            if (isSameOrigin(url)) {
                originalAssign.call(window.location, url);
            } else {
                console.warn('Cross-origin redirects are blocked:', url);
            }
        },
        get: function() {
            return window.location.toString();
        }
    });

})();
============================
(function() {
    const originalAssign = window.location.assign;
    const originalReplace = window.location.replace;
    const originalOpen = window.open;

    function isSameOrigin(url) {
        try {
            const newURL = new URL(url, window.location.origin);
            return newURL.origin === window.location.origin;
        } catch (e) {
            return false; // Invalid URL
        }
    }

    // Override assign() method
    window.location.assign = function(url) {
        if (isSameOrigin(url)) {
            originalAssign.call(window.location, url);
        } else {
            console.warn('Cross-origin redirects are blocked:', url);
        }
    };

    // Override replace() method
    window.location.replace = function(url) {
        if (isSameOrigin(url)) {
            originalReplace.call(window.location, url);
        } else {
            console.warn('Cross-origin redirects are blocked:', url);
        }
    };

    // Override window.open()
    window.open = function(url, ...args) {
        if (isSameOrigin(url)) {
            return originalOpen.call(window, url, ...args);
        } else {
            console.warn('Cross-origin window opening is blocked:', url);
            return null;
        }
    };

    // Prevent anchor tag clicks from redirecting outside the domain
    document.addEventListener('click', function(event) {
        let target = event.target.closest('a'); // Get nearest anchor tag
        if (target && target.href && !isSameOrigin(target.href)) {
            event.preventDefault();
            console.warn('Cross-origin navigation is blocked:', target.href);
        }
    });

})();
===================
(function() {
    function notifyParent() {
        window.opener.postMessage({ url: window.location.href }, window.origin);
    }

    // Detect history changes
    window.addEventListener('popstate', notifyParent);
    window.addEventListener('pushstate', notifyParent); // Requires manual trigger in app
    window.addEventListener('replaceState', notifyParent); // Requires manual trigger in app

    // Detect hash changes (`example.com/#new`)
    window.addEventListener('hashchange', notifyParent);

    // Notify parent on initial load
    notifyParent();
})();
===================================%%%%%%%%%
var childWindow;

function openNewWin(url, btn) {
    var _h = screen.availHeight - 30;
    var _w = screen.availWidth - 11;
    var left = 0;
    var top = 0;

    if (typeof childWindow === 'undefined' || childWindow.closed) {
        childWindow = window.open(url, 'SBI_LMS', 'directories=0,titlebar=0,width=' + _w + ',height=' + _h + ',top=' + top + ',left=' + left);

        // Remove parent div of the button (Existing functionality)
        $(btn).parent().find('div').remove();

        // Attach event listener for URL change detection
        if (childWindow) {
            childWindow.addEventListener('DOMContentLoaded', notifyParent);
            childWindow.addEventListener('popstate', notifyParent);
            childWindow.addEventListener('hashchange', notifyParent);

            // Override pushState & replaceState
            const originalPushState = childWindow.history.pushState;
            childWindow.history.pushState = function(...args) {
                originalPushState.apply(childWindow.history, args);
                notifyParent();
            };

            const originalReplaceState = childWindow.history.replaceState;
            childWindow.history.replaceState = function(...args) {
                originalReplaceState.apply(childWindow.history, args);
                notifyParent();
            };
        }
    } else {
        childWindow.focus();
    }
}

// Function to notify parent when child URL changes
function notifyParent() {
    try {
        window.postMessage({ url: childWindow.location.href }, window.origin);
    } catch (error) {
        console.warn('Error accessing child window URL:', error);
    }
}

// Listen for messages from the child window
window.addEventListener('message', (event) => {
    if (event.source === childWindow) {
        console.log('Child window URL changed:', event.data.url);
    }
});
*****************
var childWindow;

function openNewWin(url, btn) {
    var _h = screen.availHeight - 30;
    var _w = screen.availWidth - 11;
    var left = 0;
    var top = 0;

    if (!childWindow || childWindow.closed) {
        childWindow = window.open(url, 'SBI_LMS', 'directories=0,titlebar=0,width=' + _w + ',height=' + _h + ',top=' + top + ',left=' + left);
        
        // Remove parent div of the button
        $(btn).parent().find('div').remove();

        // Start monitoring the child window
        monitorChildURL();
    } else {
        childWindow.focus();
    }
}

function monitorChildURL() {
    const allowedOrigin = window.location.origin; // Parent's domain

    const interval = setInterval(() => {
        try {
            if (childWindow && !childWindow.closed) {
                if (childWindow.location.origin !== allowedOrigin) {
                    console.warn('Unauthorized navigation detected! Redirecting back...');
                    childWindow.location.href = allowedOrigin; // Force redirect back
                }
            } else {
                clearInterval(interval); // Stop monitoring if child is closed
            }
        } catch (error) {
            console.warn('Cross-origin navigation detected. Child window may have changed domains.');
        }
    }, 500); // Check every 500ms
}

