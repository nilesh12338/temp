<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Toast Notification</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
</head>
<body>
    <!-- Toast Container -->
    <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <!-- jQuery and Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            const userId = 123; // Example user ID (fetch from session)
            const userRole = 'admin'; // Example user role (fetch from session)

            // Store interval ID in sessionStorage to persist across pages
            if (!sessionStorage.getItem('notificationIntervalId')) {
                const intervalId = setInterval(fetchNotifications, 50000);
                sessionStorage.setItem('notificationIntervalId', intervalId);
            }

            // Fetch notifications from the backend
            function fetchNotifications() {
                $.ajax({
                    url: '/your-backend-endpoint', // Replace with your backend endpoint
                    type: 'POST',
                    data: { userId, userRole },
                    success: function (response) {
                        if (response && response.notifications && response.notifications.length > 0) {
                            response.notifications.forEach(notification => {
                                displayToast(notification.title, notification.message);
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching notifications:', error);
                    }
                });
            }

            // Function to dynamically display toast
            function displayToast(title, message) {
                const toastId = `toast-${Date.now()}`;
                const toastHtml = `
                    <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <strong class="me-auto">${title}</strong>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;
                $('#toastContainer').append(toastHtml);

                // Show toast
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement);
                toast.show();

                // Remove toast from DOM after hiding
                toastElement.addEventListener('hidden.bs.toast', () => {
                    toastElement.remove();
                });
            }

            // Clear interval on logout or when needed
            $(window).on('beforeunload', function () {
                const intervalId = sessionStorage.getItem('notificationIntervalId');
                if (intervalId) {
                    clearInterval(intervalId);
                    sessionStorage.removeItem('notificationIntervalId');
                }
            });
        });
    </script>
</body>
</html>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-regular-rounded/css/uicons-regular-rounded.css'>

<div class="toast align-items-center fade show success" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="toast-content">
    <div class="content-body d-flex align-items-center">
      <div class="icon me-4">
        <i class="fi fi-rr-badge-check d-flex"></i>
      </div>
      <div class="d-flex justify-content-between w-100">
        <div>
          <h5 class="fw-bold mb-1">Success</h5>
          <p class="text-muted mb-0">Hello, world! This is a toast message.</p>
        </div>
        <div>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>

      </div>
    </div>
  </div>
</div>

<div class="toast align-items-center fade show warning" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="toast-content">
    <div class="content-body d-flex align-items-center">
      <div class="icon me-4">
        <i class="fi fi-rr-exclamation d-flex"></i>
      </div>
      <div class="d-flex justify-content-between w-100">
        <div>
          <h5 class="fw-bold mb-1">Warning</h5>
          <p class="text-muted mb-0">Hello, world! This is a toast message.</p>
        </div>
        <div>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>

      </div>
    </div>
  </div>
</div>

<div class="toast align-items-center fade show erro" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="toast-content">
    <div class="content-body d-flex align-items-center">
      <div class="icon me-4">
        <i class="fi fi-rr-cross-circle d-flex"></i>
      </div>
      <div class="d-flex justify-content-between w-100">
        <div>
          <h5 class="fw-bold mb-1">Error</h5>
          <p class="text-muted mb-0">Hello, world! This is a toast message.</p>
        </div>
        <div>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>

      </div>
    </div>
  </div>
</div>
============================

function showToast(content, type, position) {
    var delay = 15000;
    position.forEach((el) => {
        document.querySelector("#toast-container").classList.add(el);
    });
    var html = `<div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true"><div class="d-flex"><div class="toast-body h6 p-3 m-0">${content}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div></div>`;
    var toast = htmlToElement(html);
    var toastContainer = document.querySelector("#toast-container");
    toastContainer.appendChild(toast);
    var toast = new bootstrap.Toast(toast, {delay:delay, animation:true});
    toast.show();
    setTimeout(() => toast.remove(), delay + 15000);
}

function htmlToElement(html) {
    var template = document.createElement('template');
    html = html.trim();
    template.innerHTML = html;
    return template.content.firstChild;
}      
==============
toast without dom element 

function showToast(title, message, type = 'info', delay = 5000) {
    // Create toast container if not exists
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toast-container';
        toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
        document.body.appendChild(toastContainer);
    }

    // Create toast element
    let toast = document.createElement('div');
    toast.className = `toast align-items-center text-bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.setAttribute('data-bs-delay', delay);

    // Toast content
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <strong>${title}</strong><br>${message}
            </div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

    // Append to container
    toastContainer.appendChild(toast);

    // Initialize and show toast
    let toastInstance = new bootstrap.Toast(toast);
    toastInstance.show();

    // Remove toast after it's hidden
    toast.addEventListener('hidden.bs.toast', () => {
        toast.remove();
    });
}

// Example Usage
showToast('Success', 'Data saved successfully!', 'success');
showToast('Error', 'Something went wrong!', 'danger');
