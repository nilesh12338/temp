<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Class-Based Chart Modules</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="p-4">

  <h2 class="mb-4">Dynamic Chart Modules (Class-Based)</h2>

  <!-- MODULE -->
  <div class="chart-module mb-5">
    <h5 class="chart-title">Sales Report</h5>
    <div class="d-flex gap-3 mb-2">
      <select class="form-select chart-type-selector" style="width: 150px;">
        <option value="bar">Bar</option>
        <option value="line">Line</option>
        <option value="pie">Pie</option>
      </select>
      <select class="form-select column-selector" multiple style="width: 300px;"></select>
      <button class="btn btn-primary show-chart">Show Chart</button>
    </div>
    <table class="table table-bordered data-table">
      <thead>
        <tr>
          <th>Month</th>
          <th class="col-label">Sales</th>
          <th class="col-label">Revenue</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Jan</td>
          <td class="col-value">100</td>
          <td class="col-value">200</td>
        </tr>
        <tr>
          <td>Feb</td>
          <td class="col-value">120</td>
          <td class="col-value">250</td>
        </tr>
        <tr>
          <td>Mar</td>
          <td class="col-value">130</td>
          <td class="col-value">300</td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- SHARED MODAL -->
  <div class="modal fade" id="sharedChartModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title chart-modal-title">Chart Preview</h5>
          <button class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <canvas id="sharedChartCanvas" height="100"></canvas>
          <button class="btn btn-success mt-3" id="downloadChart">Download Chart</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let sharedChart;
    let modal = new bootstrap.Modal(document.getElementById('sharedChartModal'));
    let currentModule = null;

    function getRandomColor(alpha = 0.6) {
      const r = Math.floor(Math.random() * 200);
      const g = Math.floor(Math.random() * 200);
      const b = Math.floor(Math.random() * 200);
      return [`rgba(${r},${g},${b},${alpha})`, `rgba(${r},${g},${b},1)`];
    }

    function updateChartData(moduleEl) {
      const table = moduleEl.querySelector('.data-table');
      const chartType = moduleEl.querySelector('.chart-type-selector').value;
      const columnSelector = moduleEl.querySelector('.column-selector');
      const selectedIndices = Array.from(columnSelector.selectedOptions).map(opt => parseInt(opt.value));

      const headerCells = table.querySelectorAll('thead th.col-label');
      const rowElements = table.querySelectorAll('tbody tr');
      const labels = Array.from(rowElements).map(row => row.querySelector('td').textContent.trim());

      const datasets = selectedIndices.map(index => {
        const label = headerCells[index].textContent.trim();
        const data = Array.from(rowElements).map(row => {
          const valueCells = row.querySelectorAll('.col-value');
          return parseFloat(valueCells[index].textContent.trim());
        });

        const [bg, border] = getRandomColor();
        return {
          label,
          data,
          backgroundColor: chartType === 'pie' ? data.map(() => getRandomColor()[0]) : bg,
          borderColor: border,
          borderWidth: 1
        };
      });

      const ctx = document.getElementById('sharedChartCanvas').getContext('2d');
      if (sharedChart) sharedChart.destroy();

      sharedChart = new Chart(ctx, {
        type: chartType,
        data: {
          labels,
          datasets: chartType === 'pie' ? [datasets[0]] : datasets
        },
        options: {
          responsive: true,
          plugins: {
            legend: { display: true },
            title: {
              display: true,
              text: moduleEl.querySelector('.chart-title').textContent
            }
          },
          scales: chartType === 'pie' ? {} : {
            y: { beginAtZero: true }
          }
        }
      });

      document.querySelector('.chart-modal-title').textContent = moduleEl.querySelector('.chart-title').textContent;
    }

    // Download chart image
    document.getElementById('downloadChart').addEventListener('click', () => {
      const link = document.createElement('a');
      link.href = sharedChart.toBase64Image();
      link.download = 'chart.png';
      link.click();
    });

    function initChartModule(moduleEl) {
      const table = moduleEl.querySelector('.data-table');
      const headerCells = table.querySelectorAll('thead th.col-label');
      const columnSelector = moduleEl.querySelector('.column-selector');

      columnSelector.innerHTML = '';
      headerCells.forEach((th, i) => {
        const opt = document.createElement('option');
        opt.value = i;
        opt.textContent = th.textContent.trim();
        opt.selected = true;
        columnSelector.appendChild(opt);
      });

      moduleEl.querySelector('.show-chart').addEventListener('click', () => {
        currentModule = moduleEl;
        updateChartData(moduleEl);
        modal.show();
      });
    }

    document.getElementById('sharedChartModal').addEventListener('show.bs.modal', () => {
      if (currentModule) updateChartData(currentModule);
    });

    document.querySelectorAll('.chart-module').forEach(initChartModule);
  </script>

</body>
</html>
