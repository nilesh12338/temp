<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Financial Table Chart Module</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .pie-chart-wrapper canvas {
      max-height: 250px;
      max-width: 250px;
      margin-right: 20px;
    }
  </style>
</head>
<body class="p-4">

<div class="chart-module">
  <h5 class="chart-title">Financial Report</h5>
  <div class="d-flex gap-3 mb-3">
    <select class="form-select chart-type-selector" style="width: 120px;">
      <option value="bar">Bar</option>
      <option value="line">Line</option>
      <option value="pie">Pie</option>
    </select>
    <select class="form-select year-type-selector" style="width: 200px;">
      <option value="2020-audited">2020-21 Audited</option>
      <option value="2020-estimated">2020-21 Estimated</option>
      <option value="2021-audited">2021-22 Audited</option>
      <option value="2021-estimated">2021-22 Estimated</option>
    </select>
    <select class="form-select row-selector" multiple style="width: 250px;"></select>
    <button class="btn btn-primary show-chart">Show Chart</button>
  </div>

  <table class="table table-bordered data-table">
    <thead>
      <tr>
        <th rowspan="2">Particulars</th>
        <th colspan="2">2020-21</th>
        <th colspan="2">2021-22</th>
      </tr>
      <tr>
        <th>Audited</th>
        <th>Estimated</th>
        <th>Audited</th>
        <th>Estimated</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Total Revenue</td>
        <td class="col-value col-year-2020 col-type-audited">7200</td>
        <td class="col-value col-year-2020 col-type-estimated">7570</td>
        <td class="col-value col-year-2021 col-type-audited">1250</td>
        <td class="col-value col-year-2021 col-type-estimated">7570</td>
      </tr>
      <tr>
        <td>Net Sales</td>
        <td class="col-value col-year-2020 col-type-audited">6880</td>
        <td class="col-value col-year-2020 col-type-estimated">7240</td>
        <td class="col-value col-year-2021 col-type-audited">920</td>
        <td class="col-value col-year-2021 col-type-estimated">7240</td>
      </tr>
      <tr>
        <td>Exports</td>
        <td class="col-value col-year-2020 col-type-audited">2500</td>
        <td class="col-value col-year-2020 col-type-estimated">2600</td>
        <td class="col-value col-year-2021 col-type-audited">260</td>
        <td class="col-value col-year-2021 col-type-estimated">2600</td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Modal -->
<div class="modal fade" id="sharedChartModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title chart-modal-title">Chart</h5>
        <button class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="chart-container" class="d-flex flex-row flex-wrap pie-chart-wrapper justify-content-start gap-3">
          <canvas id="sharedChartCanvas" height="100"></canvas>
        </div>
        <button class="btn btn-success mt-3" id="downloadChart">Download</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  const colors = [
    '#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6610f2', '#6f42c1'
  ];

  let sharedChart;
  let modal = new bootstrap.Modal(document.getElementById('sharedChartModal'));
  const ctx = document.getElementById('sharedChartCanvas').getContext('2d');

  function initRowDropdown(module) {
    const rows = module.querySelectorAll('tbody tr');
    const rowSelector = module.querySelector('.row-selector');
    rowSelector.innerHTML = '';
    rows.forEach((row, i) => {
      const label = row.querySelector('td').textContent.trim();
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = label;
      rowSelector.appendChild(opt);
    });
  }

  function drawPieCharts(rows, year, type, container) {
    container.innerHTML = '';
    rows.forEach((row, i) => {
      const label = row.querySelector('td').textContent.trim();
      const cell = row.querySelector(`.col-year-${year}.col-type-${type}`);
      const value = parseFloat(cell?.textContent.trim() || 0);
      const canvas = document.createElement('canvas');
      canvas.height = 250;
      container.appendChild(canvas);
      new Chart(canvas.getContext('2d'), {
        type: 'pie',
        data: {
          labels: [label],
          datasets: [{
            label,
            data: [value],
            backgroundColor: [colors[i % colors.length]],
          }]
        },
        options: {
          plugins: {
            legend: {
              display: true,
              labels: {
                generateLabels: (chart) => {
                  const data = chart.data;
                  return data.labels.map((l, i) => {
                    return {
                      text: `${l}: ${data.datasets[0].data[i]}`,
                      fillStyle: data.datasets[0].backgroundColor[i],
                      strokeStyle: data.datasets[0].backgroundColor[i],
                      lineWidth: 1
                    }
                  });
                }
              }
            },
            tooltip: {
              callbacks: {
                label: (context) => `${context.label}: ${context.parsed} units`
              }
            }
          }
        }
      });
    });
  }

  function updateChartFromRows(moduleEl) {
  const chartType = moduleEl.querySelector('.chart-type-selector').value;
  const rowSelector = moduleEl.querySelector('.row-selector');
  const selectedOptions = Array.from(rowSelector.selectedOptions).slice(0, 3);
  const selectedIndices = selectedOptions.map(opt => parseInt(opt.value));
  const selectedLabels = selectedOptions.map(opt => opt.textContent.trim());

  const table = moduleEl.querySelector('.data-table');
  const headers = Array.from(table.querySelectorAll('thead th.col-label')).map(h => h.textContent.trim());
  const rowElements = Array.from(table.querySelectorAll('tbody tr'));
  const chartContainer = document.getElementById('chartContainer');

  chartContainer.innerHTML = ''; // Clear previous
  const originalTitle = moduleEl.querySelector('.chart-title').dataset.originalTitle;
  const newTitle = `${originalTitle} â€“ ${selectedLabels.join(', ')}`;
  moduleEl.querySelector('.chart-title').textContent = newTitle;
  document.querySelector('.chart-modal-title').textContent = newTitle;

  const labels = selectedIndices.map(rowIndex =>
    rowElements[rowIndex].querySelector('td').textContent.trim()
  );

  if (chartType === 'pie') {
    const rowWrapper = document.createElement('div');
    rowWrapper.classList.add('d-flex', 'flex-wrap', 'gap-4', 'justify-content-start');
    chartContainer.appendChild(rowWrapper);

    headers.forEach((header, colIndex) => {
      const data = selectedIndices.map(rowIndex => {
        const row = rowElements[rowIndex];
        const cell = row.querySelectorAll('.col-value')[colIndex];
        return parseFloat(cell.textContent.trim());
      });

      const bgColors = data.map((_, i) => getColorByIndex(i)[0]);
      const borderColors = data.map((_, i) => getColorByIndex(i)[1]);

      const canvasWrapper = document.createElement('div');
      canvasWrapper.style.width = '250px';
      canvasWrapper.innerHTML = `<canvas height="250"></canvas>`;
      rowWrapper.appendChild(canvasWrapper);

      new Chart(canvasWrapper.querySelector('canvas'), {
        type: 'pie',
        data: {
          labels,
          datasets: [{
            data,
            backgroundColor: bgColors,
            borderColor: borderColors,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              display: true,
              labels: {
                generateLabels: (chart) =>
                  chart.data.labels.map((l, i) => ({
                    text: `${l}: ${chart.data.datasets[0].data[i]}`,
                    fillStyle: chart.data.datasets[0].backgroundColor[i]
                  }))
              }
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  const label = context.label || '';
                  const value = context.parsed;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percent = ((value / total) * 100).toFixed(1);
                  return `${label}: ${value} (${percent}%)`;
                }
              }
            },
            title: {
              display: true,
              text: header,
              font: { size: 14 }
            }
          }
        }
      });
    });
  } else {
    const canvas = document.createElement('canvas');
    canvas.id = "sharedChartCanvas";
    chartContainer.appendChild(canvas);

    const datasets = headers.map((header, colIndex) => {
      const data = selectedIndices.map(rowIndex => {
        const row = rowElements[rowIndex];
        const cell = row.querySelectorAll('.col-value')[colIndex];
        return parseFloat(cell.textContent.trim());
      });
      const [bg, border] = getColorByIndex(colIndex);
      return {
        label: header,
        data,
        backgroundColor: bg,
        borderColor: border,
        borderWidth: 2
      };
    });

    if (sharedChart) sharedChart.destroy();
    sharedChart = new Chart(canvas.getContext('2d'), {
      type: chartType,
      data: {
        labels,
        datasets
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: newTitle
          }
        },
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  }
}


  document.querySelectorAll('.chart-module').forEach(module => {
    initRowDropdown(module);
    module.querySelector('.show-chart').addEventListener('click', () => {
      updateChart(module);
      modal.show();
    });
  });

  document.getElementById('downloadChart').addEventListener('click', () => {
    const canvas = document.querySelector('#chart-container canvas');
    const link = document.createElement('a');
    link.href = canvas.toDataURL();
    link.download = 'chart.png';
    link.click();
  });
</script>
</body>
</html>
