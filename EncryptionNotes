<!DOCTYPE html>
<html>
<head>
  <title>Crypto Test</title>
</head>
<body>
  <h2>Secure Login</h2>
  <input type="text" id="userId" placeholder="User ID" />
  <button onclick="handleLogin()">Login</button>

  <script>
    async function handleLogin() {
      const userId = document.getElementById("userId").value;
      if (!userId) return alert("Enter user ID");

      // AES-256 key
      const aesKey = await crypto.subtle.generateKey(
        { name: "AES-GCM", length: 256 },
        true,
        ["encrypt", "decrypt"]
      );
      const aesKeyRaw = await crypto.subtle.exportKey("raw", aesKey);
      const aesKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(aesKeyRaw)));
      sessionStorage.setItem("aesKey", aesKeyBase64);

      // RSA Key for encryption (RSA-OAEP)
      const rsaEncKeyPair = await crypto.subtle.generateKey(
        {
          name: "RSA-OAEP",
          modulusLength: 2048,
          publicExponent: new Uint8Array([1, 0, 1]),
          hash: "SHA-256"
        },
        true,
        ["encrypt", "decrypt"]
      );

      // RSA Key for signing (RSASSA-PKCS1-v1_5)
      const rsaSignKeyPair = await crypto.subtle.generateKey(
        {
          name: "RSASSA-PKCS1-v1_5",
          modulusLength: 2048,
          publicExponent: new Uint8Array([1, 0, 1]),
          hash: "SHA-256"
        },
        true,
        ["sign", "verify"]
      );

      // Simulated server RSA public key
      const serverKeyPair = await crypto.subtle.generateKey(
        {
          name: "RSA-OAEP",
          modulusLength: 2048,
          publicExponent: new Uint8Array([1, 0, 1]),
          hash: "SHA-256"
        },
        true,
        ["encrypt", "decrypt"]
      );

      // Encrypt AES key using server public key
      const encryptedAES = await crypto.subtle.encrypt(
        { name: "RSA-OAEP" },
        serverKeyPair.publicKey,
        aesKeyRaw
      );
      const encryptedAESBase64 = btoa(String.fromCharCode(...new Uint8Array(encryptedAES)));

      // Sign AES key using signing private key
      const signature = await crypto.subtle.sign(
        { name: "RSASSA-PKCS1-v1_5" },
        rsaSignKeyPair.privateKey,
        aesKeyRaw
      );
      const signatureBase64 = btoa(String.fromCharCode(...new Uint8Array(signature)));

      console.log("Encrypted AES:", encryptedAESBase64);
      console.log("Signature:", signatureBase64);
    }
  </script>
</body>
</html>
