Subject: Constitution Module UI Inconsistencies Analysis

Dear Team,

As communicated by Sonali Ma’am, Bhanu (BA) will analyze the Constitution module and identify pages with UI inconsistencies. Once the analysis is complete, Bharat (Java Lead) will assign a developer, and the UI team will work together to fix the identified issues.

Please coordinate accordingly. Let us know if you have any questions.

Best regards,
[Your Name]
[Your Designation]


function findNonMatchingChars(str, regex) {
    return str.split("").filter(char => !regex.test(char));
}

const regex = /[a-zA-Z0-9]/;  // Matches allowed characters
const str = "Hello123!@#";
const nonMatching = findNonMatchingChars(str, regex);

console.log(nonMatching); // Output: ["!", "@", "#"]

===================
function findNonMatchingChars(str, regex) {
    const uniqueChars = new Set(); // To store unique non-matching characters

    str.split("").forEach(char => {
        if (!regex.test(char)) {
            uniqueChars.add(char === "\n" ? "\\n" : char); // Replace \n with "\\n"
        }
    });

    return [...uniqueChars]; // Convert Set to an array
}

const regex = /[a-zA-Z0-9]/;  // Matches allowed characters
const str = "Hello123!@#\nHello!"; 
const nonMatching = findNonMatchingChars(str, regex);

console.log(nonMatching); // Output: ["!", "@", "#", "\\n"]




<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="12" r="8" fill="#4CAF50">
    <animate attributeName="opacity" values="1;0.3;1" dur="1.5s" repeatCount="indefinite" />
  </circle>
</svg>


=========
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Bootstrap 5.3 Dropdown with Tooltip</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="p-5">

  <div class="dropdown">
    <div 
      class="btn btn-secondary dropdown-toggle" 
      data-bs-toggle="dropdown" 
      title="Click to open dropdown"
      role="button" 
      aria-expanded="false"
      id="dropdownTooltip"
    >
      Dropdown
    </div>
    <ul class="dropdown-menu" aria-labelledby="dropdownTooltip">
      <li><a class="dropdown-item" href="#">Action</a></li>
      <li><a class="dropdown-item" href="#">Another action</a></li>
      <li><a class="dropdown-item" href="#">Something else</a></li>
    </ul>
  </div>

  <!-- Bootstrap JS with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    // Initialize tooltip manually
    const tooltipTrigger = document.getElementById('dropdownTooltip');
    new bootstrap.Tooltip(tooltipTrigger);
  </script>

</body>
</html>
=========°°
<script>
  document.querySelectorAll('[data-tooltip]').forEach(el => {
    const title = el.getAttribute('data-tooltip');
    const placement = el.getAttribute('data-placement') || 'top';

    // Check if tooltip already exists
    if (!bootstrap.Tooltip.getInstance(el)) {
      new bootstrap.Tooltip(el, {
        title: title,
        placement: placement,
        trigger: 'hover focus'
      });
    }
  });
</script>

<style>
  .select2-selection__choice {
    background-color: #007bff !important;  /* Default blue */
    border: none !important;
    color: white !important;
    padding: 0.25em 0.5em !important;
    font-size: 0.875rem;
  }

  /* Example tag-based coloring */
  .select2-selection__choice[data-tag-color="urgent"] {
    background-color: #dc3545 !important; /* red */
  }

  .select2-selection__choice[data-tag-color="review"] {
    background-color: #ffc107 !important; /* yellow */
    color: black !important;
  }

  .select2-selection__choice[data-tag-color="completed"] {
    background-color: #198754 !important; /* green */
  }
</style>

templateSelection: function (data, container) {
        const tagClass = tagColors[data.id?.toLowerCase()];
        if (tagClass) {
          $(container).attr('data-tag-color', tagClass);
        }
        return data.text;
      }
==============
plugins: {
  legend: {
    display: true,
    labels: {
      generateLabels: (chart) => {
        if (chart.config.type !== 'pie') {
          return Chart.defaults.plugins.legend.labels.generateLabels(chart);
        }

        const data = chart.data;
        const dataset = data.datasets[0];
        return data.labels.map((label, i) => {
          const value = dataset.data[i];
          const backgroundColor = dataset.backgroundColor[i];
          return {
            text: `${label}: ${value}`,
            fillStyle: backgroundColor,
            strokeStyle: backgroundColor,
            index: i
          };
        });
      }
    }
  },
  title: {
    display: true,
    text: `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${selectedLabels.join(', ')}`
  },
  datalabels: {
    display: chartType === 'pie',
    color: '#fff',
    font: {
      weight: 'bold'
    },
    formatter: (value, ctx) => {
      return `${ctx.chart.data.labels[ctx.dataIndex]}: ${value}`;
    }
  }
}
