Here's how to implement a horizontal tree structure with expand and collapse functionality using jQuery: 
Basic Structure 
The tree structure is typically built using nested unordered lists (&lt;ul&gt;) and list items (&lt;li&gt;). Each list item can contain a link or text representing the node, and a nested &lt;ul&gt; for its children. 
HTML Example 
<div class="tree-container">
  <ul class="tree">
    <li>
      <span class="node">Node 1</span>
      <ul>
        <li><span class="node">Node 1.1</span></li>
        <li>
          <span class="node">Node 1.2</span>
          <ul>
            <li><span class="node">Node 1.2.1</span></li>
            <li><span class="node">Node 1.2.2</span></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><span class="node">Node 2</span></li>
  </ul>
</div>

jQuery Implementation 

• Add Expand/Collapse Handles: Insert a span element to act as the expand/collapse handle before each list item that has children. 

    $('.tree li').each(function() {
        if ($(this).children('ul').length > 0) {
            $(this).prepend('<span class="handle"></span>');
        }
    });

• Toggle Functionality: Attach a click event listener to the handles to toggle the visibility of the nested lists. 

    $('.tree').on('click', '.handle', function() {
        $(this).toggleClass('expanded').siblings('ul').slideToggle();
    });

• Initial State: Optionally, hide all nested lists initially. 

    $('.tree ul').hide();

CSS Styling 
.tree-container {
    overflow-x: auto; /* Allows horizontal scrolling if needed */
}

.tree,
.tree ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: flex-start;
}

.tree li {
    display: inline-flex;
    flex-direction: column;
    margin-right: 20px;
    position: relative;
}

.tree li ul {
    margin-top: 10px;
    margin-left: 20px;
}

.node {
    display: inline-block;
    padding: 5px;
    border: 1px solid #ccc;
    cursor: pointer;
}

.handle {
    display: inline-block;
    width: 15px;
    height: 15px;
    background: url('plus.png') center center no-repeat; /* Replace with your plus icon */
    cursor: pointer;
    position: absolute;
    left: -20px;
    top: 5px;
}

.handle.expanded {
    background: url('minus.png') center center no-repeat; /* Replace with your minus icon */
}

Explanation 

• The HTML structure uses nested lists to represent the tree hierarchy. 
• The jQuery code dynamically adds handles for expand/collapse functionality. 
• The CSS styles the tree to be horizontal and provides visual cues for expand/collapse. 

This approach allows users to expand and collapse branches of the tree, making it easy to navigate complex hierarchies. 

AI responses may include mistakes.

