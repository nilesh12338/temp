document.getElementById('downloadChart').addEventListener('click', () => {
  const chartType = currentModule?.querySelector('.chart-type-selector')?.value;

  if (chartType === 'pie') {
    // Collect all canvas elements from the modal
    const canvases = Array.from(document.querySelectorAll('#sharedChartModal canvas'));
    if (canvases.length === 0) return;

    // Get dimensions
    const width = canvases.reduce((sum, c) => sum + c.width, 0);
    const height = Math.max(...canvases.map(c => c.height));

    // Create new canvas
    const combinedCanvas = document.createElement('canvas');
    combinedCanvas.width = width;
    combinedCanvas.height = height;
    const ctx = combinedCanvas.getContext('2d');

    // Draw each chart onto combined canvas
    let offsetX = 0;
    canvases.forEach(canvas => {
      ctx.drawImage(canvas, offsetX, 0);
      offsetX += canvas.width;
    });

    // Trigger download
    const link = document.createElement('a');
    link.href = combinedCanvas.toDataURL('image/png');
    link.download = 'combined_charts.png';
    link.click();
  } else {
    // For single bar/line chart
    const link = document.createElement('a');
    link.href = sharedChart.toBase64Image();
    link.download = 'chart.png';
    link.click();
  }
});


=========
function initModuleDropdown(moduleEl) {
  const rows = moduleEl.querySelectorAll('tbody tr');
  const rowSelector = moduleEl.querySelector('.row-selector');
  rowSelector.innerHTML = '';

  rows.forEach((row, i) => {
    const labelCell = row.querySelector('.graph-tr-label');
    let label = '';

    if (labelCell) {
      if (labelCell.classList.contains('other')) {
        const input = labelCell.querySelector('.graph-tr-label-other');
        label = input ? input.value.trim() : '';
      } else {
        label = labelCell.textContent.trim();
      }
    }

    const opt = document.createElement('option');
    opt.value = i;
    opt.textContent = label;
    rowSelector.appendChild(opt);
  });
}
########3


Subject: Constitution Module UI Inconsistencies Analysis

Dear Team,

As communicated by Sonali Ma’am, Bhanu (BA) will analyze the Constitution module and identify pages with UI inconsistencies. Once the analysis is complete, Bharat (Java Lead) will assign a developer, and the UI team will work together to fix the identified issues.

Please coordinate accordingly. Let us know if you have any questions.

Best regards,
[Your Name]
[Your Designation]


function findNonMatchingChars(str, regex) {
    return str.split("").filter(char => !regex.test(char));
}

const regex = /[a-zA-Z0-9]/;  // Matches allowed characters
const str = "Hello123!@#";
const nonMatching = findNonMatchingChars(str, regex);

console.log(nonMatching); // Output: ["!", "@", "#"]

===================
function findNonMatchingChars(str, regex) {
    const uniqueChars = new Set(); // To store unique non-matching characters

    str.split("").forEach(char => {
        if (!regex.test(char)) {
            uniqueChars.add(char === "\n" ? "\\n" : char); // Replace \n with "\\n"
        }
    });

    return [...uniqueChars]; // Convert Set to an array
}

const regex = /[a-zA-Z0-9]/;  // Matches allowed characters
const str = "Hello123!@#\nHello!"; 
const nonMatching = findNonMatchingChars(str, regex);

console.log(nonMatching); // Output: ["!", "@", "#", "\\n"]




<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="12" r="8" fill="#4CAF50">
    <animate attributeName="opacity" values="1;0.3;1" dur="1.5s" repeatCount="indefinite" />
  </circle>
</svg>


=========
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Bootstrap 5.3 Dropdown with Tooltip</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="p-5">

  <div class="dropdown">
    <div 
      class="btn btn-secondary dropdown-toggle" 
      data-bs-toggle="dropdown" 
      title="Click to open dropdown"
      role="button" 
      aria-expanded="false"
      id="dropdownTooltip"
    >
      Dropdown
    </div>
    <ul class="dropdown-menu" aria-labelledby="dropdownTooltip">
      <li><a class="dropdown-item" href="#">Action</a></li>
      <li><a class="dropdown-item" href="#">Another action</a></li>
      <li><a class="dropdown-item" href="#">Something else</a></li>
    </ul>
  </div>

  <!-- Bootstrap JS with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    // Initialize tooltip manually
    const tooltipTrigger = document.getElementById('dropdownTooltip');
    new bootstrap.Tooltip(tooltipTrigger);
  </script>

</body>
</html>
=========°°
<script>
  document.querySelectorAll('[data-tooltip]').forEach(el => {
    const title = el.getAttribute('data-tooltip');
    const placement = el.getAttribute('data-placement') || 'top';

    // Check if tooltip already exists
    if (!bootstrap.Tooltip.getInstance(el)) {
      new bootstrap.Tooltip(el, {
        title: title,
        placement: placement,
        trigger: 'hover focus'
      });
    }
  });
</script>

<style>
  .select2-selection__choice {
    background-color: #007bff !important;  /* Default blue */
    border: none !important;
    color: white !important;
    padding: 0.25em 0.5em !important;
    font-size: 0.875rem;
  }

  /* Example tag-based coloring */
  .select2-selection__choice[data-tag-color="urgent"] {
    background-color: #dc3545 !important; /* red */
  }

  .select2-selection__choice[data-tag-color="review"] {
    background-color: #ffc107 !important; /* yellow */
    color: black !important;
  }

  .select2-selection__choice[data-tag-color="completed"] {
    background-color: #198754 !important; /* green */
  }
</style>

templateSelection: function (data, container) {
        const tagClass = tagColors[data.id?.toLowerCase()];
        if (tagClass) {
          $(container).attr('data-tag-color', tagClass);
        }
        return data.text;
      }
==============
plugins: {
  legend: {
    display: true,
    labels: {
      generateLabels: (chart) => {
        if (chart.config.type !== 'pie') {
          return Chart.defaults.plugins.legend.labels.generateLabels(chart);
        }

        const data = chart.data;
        const dataset = data.datasets[0];
        return data.labels.map((label, i) => {
          const value = dataset.data[i];
          const backgroundColor = dataset.backgroundColor[i];
          return {
            text: `${label}: ${value}`,
            fillStyle: backgroundColor,
            strokeStyle: backgroundColor,
            index: i
          };
        });
      }
    }
  },
  title: {
    display: true,
    text: `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${selectedLabels.join(', ')}`
  },
  datalabels: {
    display: chartType === 'pie',
    color: '#fff',
    font: {
      weight: 'bold'
    },
    formatter: (value, ctx) => {
      return `${ctx.chart.data.labels[ctx.dataIndex]}: ${value}`;
    }
  }
}
±++++++++++++
const fixedColors = [
  ['rgba(54, 162, 235, 0.6)', 'rgba(54, 162, 235, 1)'],   // Blue
  ['rgba(255, 99, 132, 0.6)', 'rgba(255, 99, 132, 1)'],   // Red
  ['rgba(255, 206, 86, 0.6)', 'rgba(255, 206, 86, 1)'],   // Yellow
  ['rgba(75, 192, 192, 0.6)', 'rgba(75, 192, 192, 1)'],   // Teal
  ['rgba(153, 102, 255, 0.6)', 'rgba(153, 102, 255, 1)'], // Purple
  ['rgba(255, 159, 64, 0.6)', 'rgba(255, 159, 64, 1)'],   // Orange
];

function getColorByIndex(i) {
  return fixedColors[i % fixedColors.length];
#############₹
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  Chart.register(ChartDataLabels);
  let sharedChart;
  let modal = new bootstrap.Modal(document.getElementById('sharedChartModal'));
  let currentModule = null;

  function getRandomColor(alpha = 0.6) {
    const r = Math.floor(Math.random() * 200);
    const g = Math.floor(Math.random() * 200);
    const b = Math.floor(Math.random() * 200);
    return [`rgba(${r},${g},${b},${alpha})`, `rgba(${r},${g},${b},1)`];
  }

  function updateChartFromRows(moduleEl) {
    const chartType = moduleEl.querySelector('.chart-type-selector').value;
    const rowSelector = moduleEl.querySelector('.row-selector');
    const selectedOptions = Array.from(rowSelector.selectedOptions);
    const selectedIndices = selectedOptions.map(opt => parseInt(opt.value));
    const selectedLabels = selectedOptions.map(opt => opt.textContent.trim());

    const table = moduleEl.querySelector('.data-table');
    const headers = Array.from(table.querySelectorAll('thead th.col-label')).map(h => h.textContent.trim());
    const rowElements = Array.from(table.querySelectorAll('tbody tr'));

    const datasets = selectedIndices.map(rowIndex => {
      const row = rowElements[rowIndex];
      const label = row.querySelector('td').textContent.trim();
      const valueCells = row.querySelectorAll('.col-value');
      const data = Array.from(valueCells).map(cell => parseFloat(cell.textContent.trim()));
      const [bg, border] = getRandomColor();
      return {
        label,
        data,
        backgroundColor: chartType === 'pie' ? data.map(() => getRandomColor()[0]) : bg,
        borderColor: border,
        borderWidth: 1
      };
    });

    const ctx = document.getElementById('sharedChartCanvas').getContext('2d');
    if (sharedChart) sharedChart.destroy();

    const data = {
      labels: headers,
      datasets: chartType === 'pie' ? [datasets[0]] : datasets
    };

    sharedChart = new Chart(ctx, {
      type: chartType,
      data,
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: true,
            labels: {
              generateLabels: chart => {
                if (chart.config.type !== 'pie') {
                  return Chart.defaults.plugins.legend.labels.generateLabels(chart);
                }
                const ds = chart.data.datasets[0];
                const total = ds.data.reduce((sum, val) => sum + val, 0);
                return chart.data.labels.map((label, i) => {
                  const value = ds.data[i];
                  const percent = ((value / total) * 100).toFixed(1);
                  return {
                    text: `${label}: ${value} (${percent}%)`,
                    fillStyle: ds.backgroundColor[i],
                    strokeStyle: ds.backgroundColor[i],
                    index: i
                  };
                });
              }
            }
          },
          title: {
            display: true,
            text: `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${selectedLabels.join(', ')}`
          },
          datalabels: {
            display: ctx => ctx.chart.config.type === 'pie',
            color: '#fff',
            font: { weight: 'bold' },
            formatter: (value, ctx) => {
              const label = ctx.chart.data.labels[ctx.dataIndex];
              const total = ctx.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
              const percent = ((value / total) * 100).toFixed(1);
              return `${label}: ${value} (${percent}%)`;
            }
          },
          tooltip: {
            callbacks: {
              label: (ctx) => {
                const label = ctx.label;
                const value = ctx.parsed;
                const total = ctx.chart.data.datasets[ctx.datasetIndex].data.reduce((a, b) => a + b, 0);
                const percent = ((value / total) * 100).toFixed(1);
                return `${label}: ${value} (${percent}%)`;
              }
            }
          }
        },
        scales: chartType === 'pie' ? {} : {
          y: { beginAtZero: true }
        }
      }
    });

    const originalTitle = moduleEl.querySelector('.chart-title').dataset.originalTitle;
    const newTitle = `${originalTitle} – ${selectedLabels.join(', ')}`;
    moduleEl.querySelector('.chart-title').textContent = newTitle;
    document.querySelector('.chart-modal-title').textContent = newTitle;
  }

  function initModuleDropdown(moduleEl) {
    const table = moduleEl.querySelector('.data-table');
    const rows = table.querySelectorAll('tbody tr');
    const rowSelector = moduleEl.querySelector('.row-selector');
    rowSelector.innerHTML = '';
    rows.forEach((row, i) => {
      const label = row.querySelector('td').textContent.trim();
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = label;
      rowSelector.appendChild(opt);
    });
  }

  document.querySelectorAll('.chart-module').forEach(module => {
    initModuleDropdown(module);
    module.querySelector('.show-chart').addEventListener('click', () => {
      currentModule = module;
      updateChartFromRows(module);
      modal.show();
    });
  });

  document.getElementById('downloadChart').addEventListener('click', () => {
    const link = document.createElement('a');
    link.href = sharedChart.toBase64Image();
    link.download = 'chart.png';
    link.click();
  });

  document.getElementById('sharedChartModal').addEventListener('show.bs.modal', () => {
    if (currentModule) updateChartFromRows(currentModule);
  });
</script>
&&&&&&&&&&&&&
options: {
  responsive: true,
  plugins: {
    legend: {
      display: true,
      labels: {
        generateLabels: (chart) => {
          if (chart.config.type !== 'pie') {
            return Chart.defaults.plugins.legend.labels.generateLabels(chart);
          }

          const data = chart.data;
          return data.labels.map((label, i) => {
            const value = data.datasets[0].data[i];
            const bgColor = data.datasets[0].backgroundColor[i];
            return {
              text: `${label}: ${value}`,
              fillStyle: bgColor,
              strokeStyle: bgColor,
              index: i
            };
          });
        }
      }
    },
    tooltip: {
      callbacks: {
        label: function (context) {
          const label = context.label || '';
          const value = context.parsed;
          let total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
          let percent = ((value / total) * 100).toFixed(1);
          return `${label}: ${value} (${percent}%)`;
        }
      }
    },
    title: {
      display: true,
      text: `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${selectedLabels.join(', ')}`
    }
  },
  scales: chartType === 'pie' ? {} : {
    y: { beginAtZero: true }
  }
}

₹₹₹₹₹₹₹₹₹₹₹₹₹₹
function updateChartFromRows(moduleEl) {
  const chartType = moduleEl.querySelector('.chart-type-selector').value;
  const rowSelector = moduleEl.querySelector('.row-selector');
  const selectedOptions = Array.from(rowSelector.selectedOptions);
  const selectedIndices = selectedOptions.map(opt => parseInt(opt.value));
  const selectedLabels = selectedOptions.map(opt => opt.textContent.trim());

  const table = moduleEl.querySelector('.data-table');
  const headers = Array.from(table.querySelectorAll('thead th.col-label')).map(h => h.textContent.trim());
  const rowElements = Array.from(table.querySelectorAll('tbody tr'));

  const ctxContainer = document.querySelector('#sharedChartCanvas').parentNode;
  ctxContainer.innerHTML = ''; // Clear previous charts

  selectedIndices.slice(0, 3).forEach((rowIndex, i) => {
    const canvas = document.createElement('canvas');
    canvas.height = 300;
    canvas.classList.add('mb-4');
    ctxContainer.appendChild(canvas);

    const row = rowElements[rowIndex];
    const label = row.querySelector('td').textContent.trim();
    const valueCells = row.querySelectorAll('.col-value');
    const data = Array.from(valueCells).map(cell => parseFloat(cell.textContent.trim()));

    const backgroundColors = data.map((_, idx) => getColorByIndex(idx)[0]);
    const borderColors = data.map((_, idx) => getColorByIndex(idx)[1]);

    const chart = new Chart(canvas.getContext('2d'), {
      type: chartType,
      data: {
        labels: headers,
        datasets: [{
          label: label,
          data,
          backgroundColor: chartType === 'pie' ? backgroundColors : backgroundColors[0],
          borderColor: chartType === 'pie' ? borderColors : borderColors[0],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: true,
            labels: {
              generateLabels: (chart) => {
                if (chartType !== 'pie') {
                  return Chart.defaults.plugins.legend.labels.generateLabels(chart);
                }
                return chart.data.labels.map((label, j) => {
                  const value = chart.data.datasets[0].data[j];
                  return {
                    text: `${label}: ${value}`,
                    fillStyle: chart.data.datasets[0].backgroundColor[j],
                    strokeStyle: chart.data.datasets[0].backgroundColor[j],
                    index: j
                  };
                });
              }
            }
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                const label = context.label || '';
                const value = context.parsed;
                let total = context.dataset.data.reduce((a, b) => a + b, 0);
                let percent = ((value / total) * 100).toFixed(1);
                return `${label}: ${value} (${percent}%)`;
              }
            }
          },
          title: {
            display: true,
            text: `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${label}`
          }
        },
        scales: chartType === 'pie' ? {} : {
          y: { beginAtZero: true }
        }
      }
    });
  });

  const newTitle = `${moduleEl.querySelector('.chart-title').dataset.originalTitle} – ${selectedLabels.join(', ')}`;
  moduleEl.querySelector('.chart-title').textContent = newTitle;
  document.querySelector('.chart-modal-title').textContent = newTitle;
}
