<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Reusable Tags Input</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .tags-wrapper {
      border: 1px solid #ced4da;
      border-radius: .375rem;
      padding: 0.5rem;
      min-height: 46px;
      display: flex;
      flex-wrap: wrap;
      position: relative;
    }
    .tag {
      margin: 0 5px 5px 0;
      display: inline-flex;
      align-items: center;
    }
    .tag .remove {
      cursor: pointer;
      margin-left: 6px;
    }
    .tag-input {
      border: none;
      outline: none;
      min-width: 120px;
      flex-grow: 1;
    }
    .suggestions {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      z-index: 1000;
      background: white;
      border: 1px solid #ced4da;
      border-top: none;
      max-height: 150px;
      overflow-y: auto;
    }
    .suggestions div {
      padding: 6px 10px;
      cursor: pointer;
    }
    .suggestions div:hover {
      background-color: #f8f9fa;
    }
  </style>
</head>
<body class="p-4">

<div class="container">
  <h3>Reusable TagsInput Example</h3>

  <form id="form1" class="mb-4">
    <label class="form-label">Skills</label>
    <div id="tagsInput1" class="tags-wrapper mb-2">
      <input type="text" class="tag-input" placeholder="Type and press Enter" autocomplete="off">
      <div class="suggestions"></div>
    </div>
    <input type="hidden" name="skills" id="hiddenTags1">
    <button class="btn btn-primary" type="submit">Submit Skills</button>
    <div class="mt-2"><strong>Output:</strong> <span id="output1"></span></div>
  </form>

  <form id="form2">
    <label class="form-label">Hobbies</label>
    <div id="tagsInput2" class="tags-wrapper mb-2">
      <input type="text" class="tag-input" placeholder="Type and press Enter" autocomplete="off">
      <div class="suggestions"></div>
    </div>
    <input type="hidden" name="hobbies" id="hiddenTags2">
    <button class="btn btn-success" type="submit">Submit Hobbies</button>
    <div class="mt-2"><strong>Output:</strong> <span id="output2"></span></div>
  </form>
</div>

<script>
  class TagsInput {
    constructor(wrapperId, hiddenInputId, options = {}) {
      this.wrapper = document.getElementById(wrapperId);
      this.input = this.wrapper.querySelector('.tag-input');
      this.hiddenInput = document.getElementById(hiddenInputId);
      this.suggestionsBox = this.wrapper.querySelector('.suggestions');

      this.tags = [];
      this.maxTags = options.maxTags || 10;
      this.suggestionsList = options.suggestions || [];

      this._addEvents();
    }

    _addEvents() {
      this.input.addEventListener('keydown', (e) => this._handleKeyDown(e));
      this.input.addEventListener('input', () => this._showSuggestions());
      document.addEventListener('click', (e) => {
        if (!this.wrapper.contains(e.target)) this._hideSuggestions();
      });
    }

    _handleKeyDown(e) {
      const value = this.input.value.trim();
      if ((e.key === 'Enter' || e.key === ',') && value) {
        e.preventDefault();
        this._addTag(value);
      } else if (e.key === 'Backspace' && value === '') {
        this.tags.pop();
        this._renderTags();
      }
    }

    _addTag(tag) {
      if (this.tags.includes(tag) || this.tags.length >= this.maxTags) return;
      this.tags.push(tag);
      this._renderTags();
      this._hideSuggestions();
    }

    _renderTags() {
      this.wrapper.querySelectorAll('.tag').forEach(tag => tag.remove());

      this.tags.forEach((tag, index) => {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary tag';
        badge.textContent = tag;

        const removeBtn = document.createElement('span');
        removeBtn.className = 'remove';
        removeBtn.innerHTML = '&times;';
        removeBtn.onclick = () => {
          this.tags.splice(index, 1);
          this._renderTags();
        };

        badge.appendChild(removeBtn);
        this.wrapper.insertBefore(badge, this.input);
      });

      this.input.value = '';
      this.hiddenInput.value = this.tags.join(',');
    }

    _showSuggestions() {
      const query = this.input.value.trim().toLowerCase();
      if (!query) return this._hideSuggestions();

      const matches = this.suggestionsList.filter(item =>
        item.toLowerCase().startsWith(query) && !this.tags.includes(item)
      );

      if (!matches.length) return this._hideSuggestions();

      this.suggestionsBox.innerHTML = '';
      matches.forEach(match => {
        const div = document.createElement('div');
        div.textContent = match;
        div.onclick = () => {
          this._addTag(match);
          this.input.focus();
        };
        this.suggestionsBox.appendChild(div);
      });
      this.suggestionsBox.style.display = 'block';
    }

    _hideSuggestions() {
      this.suggestionsBox.style.display = 'none';
    }

    getTags() {
      return [...this.tags];
    }
  }

  // Initialize multiple instances
  const skillsInput = new TagsInput('tagsInput1', 'hiddenTags1', {
    maxTags: 5,
    suggestions: ['HTML', 'CSS', 'JavaScript', 'React', 'Bootstrap', 'Vue']
  });

  const hobbiesInput = new TagsInput('tagsInput2', 'hiddenTags2', {
    maxTags: 7,
    suggestions: ['Reading', 'Traveling', 'Gaming', 'Cooking', 'Swimming', 'Hiking']
  });

  // Form handlers
  document.getElementById('form1').addEventListener('submit', function (e) {
    e.preventDefault();
    document.getElementById('output1').textContent = skillsInput.getTags().join(', ');
  });

  document.getElementById('form2').addEventListener('submit', function (e) {
    e.preventDefault();
    document.getElementById('output2').textContent = hobbiesInput.getTags().join(', ');
  });
</script>

</body>
</html>
