<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>LLMS Horizontal Tree</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
  <style>
    .tree-container {
      display: flex;
      flex-direction: row;
      align-items: flex-start;
      gap: 2rem;
      overflow-x: auto;
      padding: 1rem;
      position: relative;
    }
    .tree-level {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      position: relative;
    }
    .tree-card {
      position: relative;
      padding: 0.5rem;
      background-color: #f8f9fa;
      border-left: 5px solid #0d6efd;
      border-radius: 0.25rem;
      min-width: 200px;
      z-index: 1;
    }
    svg.connector-layer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      pointer-events: none;
    }
    .toggle-btn {
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .collapse.fade {
      transition: height 0.3s ease;
    }
    .collapse:not(.show) {
      display: block;
      height: 0;
      overflow: hidden;
      opacity: 0;
    }
    .collapse.show {
      height: auto;
      opacity: 1;
    }
    .branch-scroll {
      max-height: 400px;
      overflow-y: auto;
    }
    path.animated-line {
      stroke-dasharray: 1000;
      stroke-dashoffset: 1000;
      animation: draw 1s forwards ease-in-out;
    }
    @keyframes draw {
      to {
        stroke-dashoffset: 0;
      }
    }
    @media print {
      .btn, .toggle-btn, .collapse:not(.show) {
        display: none !important;
      }
      .collapse.show {
        display: block !important;
      }
    }
  </style>
</head>
<body>
<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mt-3">
    <h5>LLMS User Details</h5>
    <div>
      <button class="btn btn-secondary btn-sm me-2" onclick="window.print()"><i class="bi bi-printer"></i> Print</button>
      <button class="btn btn-outline-primary btn-sm me-2" onclick="toggleBranches()">Toggle Branches</button>
      <button class="btn btn-outline-success btn-sm" onclick="exportImage()"><i class="bi bi-download"></i> Export Image</button>
    </div>
  </div>
  <div class="position-relative" id="tree-wrapper">
    <svg class="connector-layer" id="connector-svg"></svg>
    <div class="tree-container" id="tree-root"></div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script>
  const treeData = {
    circle: {
      name: "Mumbai Metro",
      networks: [
        {
          name: "Network 1",
          aos: [
            {
              name: "AO 1 - East Mumbai",
              rbos: [
                {
                  name: "RBO 1 - Navi Mumbai"
                }
              ]
            }
          ]
        },
        {
          name: "Network 2",
          aos: []
        }
      ]
    }
  };

  function createCard(title, btnLabel, collapseId, lazyLoad = false) {
    return `
      <div class="tree-card" data-collapse-id="${collapseId}" data-lazy="${lazyLoad}" id="card-${collapseId}">
        <div><strong>${title}</strong></div>
        ${btnLabel ? `
          <button
            class="btn btn-outline-primary btn-sm mt-2 toggle-btn"
            data-bs-toggle="collapse"
            data-bs-target="#${collapseId}"
            aria-expanded="false"
            aria-controls="${collapseId}"
          >
            <i class="bi bi-caret-down-fill"></i> ${btnLabel}
          </button>` : ''}
      </div>
    `;
  }

  function loadBranchesSimulated(rboName, count = 20) {
    return new Promise(resolve => {
      setTimeout(() => {
        const branches = Array.from({length: count}, (_, i) => ({
          name: `${rboName} Branch ${i + 1}`,
          incumbency: "",
          cpc: "",
          aes: ""
        }));
        resolve(branches);
      }, 500);
    });
  }

  async function renderTree(data) {
    const $root = $('#tree-root');

    const $circleLevel = $('<div class="tree-level"></div>');
    $circleLevel.append(createCard(data.circle.name, 'View Networks', 'networksCollapse'));
    $root.append($circleLevel);

    const $networkLevel = $('<div class="tree-level collapse fade" id="networksCollapse"></div>');
    data.circle.networks.forEach((net, ni) => {
      const netCollapseId = `aoCollapse${ni}`;
      $networkLevel.append(createCard(net.name, 'View AOs', netCollapseId));

      const $aoLevel = $(`<div class="tree-level collapse fade" id="${netCollapseId}"></div>`);
      net.aos.forEach((ao, ai) => {
        const aoCollapseId = `rboCollapse${ni}_${ai}`;
        $aoLevel.append(createCard(ao.name, 'View RBOs', aoCollapseId));

        const $rboLevel = $(`<div class="tree-level collapse fade" id="${aoCollapseId}"></div>`);
        ao.rbos.forEach((rbo, ri) => {
          const rboCollapseId = `branchCollapse${ni}_${ai}_${ri}`;
          $rboLevel.append(createCard(rbo.name, 'View Branches', rboCollapseId, true));

          const $branchLevel = $(`<div class="tree-level collapse fade branch-scroll" id="${rboCollapseId}"></div>`);
          $root.append($branchLevel);
        });
        $root.append($rboLevel);
      });
      $root.append($aoLevel);
    });
    $root.append($networkLevel);
  }

  function attachLazyLoad() {
    $(document).on('show.bs.collapse', async function (e) {
      const $trigger = $(e.target);
      const $cards = $(`[data-collapse-id='${e.target.id}']`);
      const isLazy = $cards.attr('data-lazy') === 'true';
      if (!isLazy) return;

      if ($trigger.children().length === 0) {
        const branches = await loadBranchesSimulated($cards.find('strong').text());
        branches.forEach(branch => {
          const branchCard = `
            <div class="tree-card">
              <div><strong>${branch.name}</strong></div>
              <div class="small text-muted">
                Incumbency: ${branch.incumbency || '-'}<br>
                Linked CPC: ${branch.cpc || '-'}<br>
                No. of A/Es: ${branch.aes || '-'}
              </div>
              <button class="btn btn-info btn-sm mt-2">User List</button>
            </div>`;
          $trigger.append(branchCard);
        });
        setTimeout(drawLines, 500);
      }
    });
  }

  function drawLines() {
    const svg = document.getElementById('connector-svg');
    svg.innerHTML = '';
    const levels = document.querySelectorAll('.tree-level');
    for (let i = 0; i < levels.length - 1; i++) {
      const fromCards = levels[i].querySelectorAll('.tree-card');
      const toCards = levels[i + 1].querySelectorAll('.tree-card');

      fromCards.forEach(from => {
        const fromX = from.offsetLeft + from.offsetWidth;
        const fromY = from.offsetTop + from.offsetHeight / 2;

        toCards.forEach(to => {
          const toX = to.offsetLeft;
          const toY = to.offsetTop + to.offsetHeight / 2;

          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          path.setAttribute('stroke', '#0d6efd');
          path.setAttribute('fill', 'none');
          path.setAttribute('stroke-width', '2');
          path.setAttribute('class', 'animated-line');
          path.setAttribute('d', `M${fromX},${fromY} C${fromX + 30},${fromY} ${toX - 30},${toY} ${toX},${toY}`);
          svg.appendChild(path);
        });
      });
    }
  }

  function toggleBranches() {
    const branches = document.querySelectorAll("[id^='branchCollapse']");
    branches.forEach(el => {
      const bsCollapse = bootstrap.Collapse.getOrCreateInstance(el);
      el.classList.contains('show') ? bsCollapse.hide() : bsCollapse.show();
    });
  }

  function exportImage() {
    const wrapper = document.getElementById("tree-wrapper");
    html2canvas(wrapper).then(canvas => {
      const link = document.createElement('a');
      link.download = 'llms-tree.png';
      link.href = canvas.toDataURL();
      link.click();
    });
  }

  $(document).ready(function () {
    requestIdleCallback(async () => {
      await renderTree(treeData);
      attachLazyLoad();
      setTimeout(drawLines, 1000);
    });
  });
</script>
</body>
</html>
